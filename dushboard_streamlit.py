#streamlit==1.49.0
#pandas==1.5.3
#numpy==1.24.3
#plotly==5.9.0
#matplotlib==3.7.1
#seaborn==0.12.2

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime, timedelta
import streamlit as st
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
from matplotlib.colors import ListedColormap
import warnings
warnings.filterwarnings('ignore')

# —Å—Ç–∏–ª—å
plt.style.use('default')
sns.set(style="whitegrid", palette="gray")

# –∫–µ—à–∏—Ä—É–µ–º –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
@st.cache_data
def load_data():
    df = pd.read_csv('df.csv', parse_dates=['created_date', 'resolved_date'])
    df = df.drop(df.columns[0], axis=1)
    df['last_status'] = df['last_status'].replace('–í —Ä–∞–±–æ—Ç—É', '–í —Ä–∞–±–æ—Ç–µ')
    
    # –≤—Ä–µ–º—è —Ä–µ—à–µ–Ω–∏—è –≤ —á–∞—Å–∞—Ö
    df['resolution_in_hours'] = (df['resolved_date'] - df['created_date']).dt.total_seconds() / 3600
    
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–±–ª—é–¥–µ–Ω–∏—è SLA
    df['sla_violation'] = df['resolution_in_hours'] > df['sla_hours']
    df['sla_compliance'] = ~df['sla_violation']
    
    return df

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Ç–æ—Ä–æ–≥–æ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–∞
@st.cache_data
def load_status_data():
    return pd.read_csv('ticket_status_history_detailed_last_ver.csv', parse_dates=['changed_date'])

# –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
def analyze_status_data(df_status):
    df_sorted = df_status.sort_values(by=['ticket_id', 'changed_date'])
    
    # –°—Ç–∞—Ç—É—Å—ã
    closed_statuses = ['–í—ã–ø–æ–ª–Ω–µ–Ω–æ', '–û—Ç–º–µ–Ω–µ–Ω']
    active_statuses = ['–í —Ä–∞–±–æ—Ç—É', '–í —Ä–∞–±–æ—Ç–µ', '–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ', '–ù–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–∏', '–û–∂–∏–¥–∞–µ—Ç—Å—è –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è']
    
    # –æ—Ç–±–∏—Ä–∞–µ–º –∑–∞–∫—Ä—ã—Ç—ã–µ –∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã
    df_sorted['is_closed'] = df_sorted['status'].isin(closed_statuses)
    df_sorted['is_active'] = df_sorted['status'].isin(active_statuses)
    
    # –Ω–∞—Ö–æ–¥–∏–º –ø–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç—ã–µ —Ç–∏–∫–µ—Ç—ã
    df_sorted['next_is_active'] = df_sorted.groupby('ticket_id')['is_active'].shift(-1)
    reopened_mask = df_sorted['is_closed'] & df_sorted['next_is_active']
    reopened_tickets = df_sorted.loc[reopened_mask, 'ticket_id'].unique().tolist()
    
    # –ê–Ω–∞–ª–∏–∑ –ø–æ –º–µ—Å—è—Ü–∞–º –∏ –∑–∞–∫—Ä—ã—Ç—ã–µ —Ç–∏–∫–µ—Ç—ã
    df_sorted['month'] = df_sorted['changed_date'].dt.to_period('M')
    closed_tickets = df_sorted[df_sorted['status'].isin(closed_statuses)]
    closed_per_month = closed_tickets.groupby('month')['ticket_id'].nunique().rename('closed_tickets')
    
    # –ø–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç—ã–µ —Ç–∏–∫–µ—Ç—ã –ø–æ –º–µ—Å—è—Ü–∞–º
    reopened_df = df_sorted[df_sorted['ticket_id'].isin(reopened_tickets)]
    reopened_per_month = reopened_df.groupby('month')['ticket_id'].nunique().rename('reopened_tickets')
    
    # –°–æ–±–∏—Ä–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É
    result_df = pd.concat([closed_per_month, reopened_per_month], axis=1).fillna(0)
    result_df['percentage_reopened'] = (result_df['reopened_tickets'] / result_df['closed_tickets'] * 100).fillna(0)
    
    # –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞ –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏
    assignee_reopened = df_sorted[
        (df_sorted['ticket_id'].isin(reopened_tickets)) & 
        (df_sorted['status'].isin(closed_statuses))
    ].groupby('ticket_id').last().reset_index()[['ticket_id', 'assignee']]
    
    assignee_counts = assignee_reopened['assignee'].value_counts()
    
    return {
        'result_df': result_df,
        'assignee_counts': assignee_counts,
        'reopened_tickets': reopened_tickets
    }

# –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
def main():
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    df = load_data()
    df_status = load_status_data()
    status_analysis = analyze_status_data(df_status)
    
    # –°–∞–π–¥–±–∞—Ä, –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
    st.sidebar.title("–§–∏–ª—å—Ç—Ä—ã")

    # –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–∞–º
    min_date = df['created_date'].min()
    max_date = df['created_date'].max()

    date_range = st.sidebar.date_input(
        "–î–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è",
        value=(min_date, max_date),
        min_value=min_date,
        max_value=max_date
    )

    if len(date_range) == 2:
        start_date, end_date = date_range
        df = df[(df['created_date'] >= pd.Timestamp(start_date)) & #–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–∞—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –ù–ï —Ä–∞–Ω—å—à–µ –Ω–∞—á–∞–ª–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
                (df['created_date'] <= pd.Timestamp(end_date))]  #—Å—Ç–∞–≤–ª—è–µ—Ç –¥–∞—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –ù–ï –ø–æ–∑–∂–µ –∫–æ–Ω—Ü–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞

    # –§–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º
    priorities = st.sidebar.multiselect(
        "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç",
        options=sorted(df['priority'].unique()),
        default=sorted(df['priority'].unique())
    )

    if priorities:
        df = df[df['priority'].isin(priorities)]

    # –§–∏–ª—å—Ç—Ä –ø–æ –º–µ—Ç–∫–∞–º
    tags = st.sidebar.multiselect(
        "–ú–µ—Ç–∫–∏",
        options=sorted(df['tag'].dropna().unique()),
        default=sorted(df['tag'].dropna().unique())
    )

    if tags:
        df = df[df['tag'].isin(tags)]

    # –§–∏–ª—å—Ç—Ä –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º
    assignees = st.sidebar.multiselect(
        "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏",
        options=sorted(df['last_assignee'].unique()),
        default=sorted(df['last_assignee'].unique())
    )

    if assignees:
        df = df[df['last_assignee'].isin(assignees)]
    
    # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–æ–≤
    st.sidebar.header("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
    if st.sidebar.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å—Ç–∞—Ç—É—Å–æ–≤", key="refresh_status"):
        st.cache_data.clear()
        st.rerun()

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–∞—à–±–æ—Ä–¥–∞
    st.title("–ê–Ω–∞–ª–∏–∑ —Ç–∏–∫–µ—Ç–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∫–∏")

    # KPI –±–∞–Ω—ã
    col1, col2 = st.columns(2) #—Å–æ–∑–¥–∞–ª–∏ –¥–≤–∞ —Å—Ç–æ–ª–±—Ü–∞ –¥–ª—è –ë–∞–Ω–æ–≤, –±—É–¥–µ—Ç —Å—Ä–µ–¥–Ω–µ–µ –∏ –º–µ–¥–∏–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —Ä–µ—à–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–æ–≤

    with col1:
        avg_resolution = df['resolution_in_hours'].mean()
        st.metric("–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Ä–µ—à–µ–Ω–∏—è (—á–∞—Å—ã)", f"{avg_resolution:.1f}")

    with col2:
        median_resolution = df['resolution_in_hours'].median()
        st.metric("–ú–µ–¥–∏–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —Ä–µ—à–µ–Ω–∏—è (—á–∞—Å—ã)", f"{median_resolution:.1f}")

    # üìä –û—Å–Ω–æ–≤–Ω—ã–µ KPI, —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:
    st.header("üìä –û—Å–Ω–æ–≤–Ω—ã–µ KPI, —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:")

    # –ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–±–ª—é–¥–µ–Ω–∏—è SLA, –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–∫
    st.subheader("–ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–±–ª—é–¥–µ–Ω–∏—è SLA, –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–∫")

    violated = (df['sla_compliance'] == False).sum()
    complied = (df['sla_compliance'] == True).sum()

    fig, ax = plt.subplots(figsize=(8, 4))
    counts = [violated, complied]
    labels = ['–ù–∞—Ä—É—à–µ–Ω–æ', '–°–æ–±–ª—é–¥–µ–Ω–æ']
    colors = ['red', 'green']

    ax.bar(labels, counts, color=colors, alpha=0.5, edgecolor='black', linewidth=0.5)
    ax.set_title('–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ–±–ª—é–¥–µ–Ω–∏–µ SLA')
    ax.set_xlabel('–°–æ–±–ª—é–¥–µ–Ω–æ SLA')
    ax.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∏–∫–µ—Ç–æ–≤')

    #–ø–æ–¥–ø–∏—Å–∏ –∑–Ω–∞—á–µ–Ω–∏–π –Ω–∞–¥ —Å—Ç–æ–ª–±—Ü–∞–º–∏
    for i, count in enumerate(counts):
        ax.text(i, count + 5, str(count), ha='center', va='bottom', fontweight='bold')

    ax.grid(False)
    st.pyplot(fig)

    # –î–æ–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è SLA –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º
    sla_priority = df.groupby('priority')['sla_compliance'].mean() * 100

    fig, ax = plt.subplots(figsize=(10, 6))
    colors = sns.light_palette("gray", n_colors=len(sla_priority))
    ax = sla_priority.plot(kind='bar', color=colors, edgecolor='black', linewidth=0.5, ax=ax)
    ax.set_title('–î–æ–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è SLA –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º')
    ax.set_xlabel('–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç')
    ax.set_ylabel('–î–æ–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è SLA (%)')
    ax.set_xticklabels(sla_priority.index, rotation=0)

    for i, v in enumerate(sla_priority):
        ax.text(i, v + 1, f'{v:.1f}%', ha='center', va='bottom', fontsize=9)#–ø–æ–¥–ø–∏—Å–∏ –Ω–∞–¥ —Å—Ç–æ–ª–±—Ü–æ–º

    ax.grid(False)
    st.pyplot(fig)

    # üìÖ –ú–µ—Ç—Ä–∏–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏
    st.header("üìÖ –ú–µ—Ç—Ä–∏–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏")

    # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∏–∫–µ—Ç–æ–≤
    st.subheader("–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∏–∫–µ—Ç–æ–≤")
    st.write(f"–í—Å–µ–≥–æ —Ç–∏–∫–µ—Ç–æ–≤: {df['ticket_id'].count()}")

    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–∫–µ—Ç–æ–≤ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º
    st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–∫–µ—Ç–æ–≤ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º")

    ticket_counts = df['priority'].value_counts().sort_index()

    fig, ax = plt.subplots(figsize=(10, 6))
    ax.bar(ticket_counts.index, ticket_counts.values, alpha=0.7, edgecolor='black')
    ax.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–∫–µ—Ç–æ–≤ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º')
    ax.set_xlabel('–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç')
    ax.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∏–∫–µ—Ç–æ–≤')

    for i, count in enumerate(ticket_counts.values):
        ax.text(i, count + 5, str(count), ha='center', va='bottom', fontweight='bold')#–ø–æ–¥–ø–∏—Å–∏ –Ω–∞–¥ —Å—Ç–æ–ª–±—Ü–æ–º

    ax.grid(False)
    st.pyplot(fig)

    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–∫–µ—Ç–æ–≤ –ø–æ –º–µ—Ç–∫–∞–º
    st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–∫–µ—Ç–æ–≤ –ø–æ –º–µ—Ç–∫–∞–º")

    tag_counts = df['tag'].value_counts()

    fig, ax = plt.subplots(figsize=(12, 6))
    ax.bar(range(len(tag_counts)), tag_counts.values, alpha=0.7, edgecolor='black')
    ax.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–∫–µ—Ç–æ–≤ –ø–æ –º–µ—Ç–∫–∞–º')
    ax.set_xlabel('–ú–µ—Ç–∫–∏')
    ax.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∏–∫–µ—Ç–æ–≤')
    ax.set_xticks(range(len(tag_counts)))
    ax.set_xticklabels(tag_counts.index, rotation=45, ha='right')

    for i, count in enumerate(tag_counts.values):
        ax.text(i, count + 5, str(count), ha='center', va='bottom', fontweight='bold', fontsize=8)

    ax.grid(False)
    st.pyplot(fig)


    # üîÑ –ê–ù–ê–õ–ò–ó –ü–û–í–¢–û–†–ù–´–• –û–ë–†–ê–©–ï–ù–ò–ô
    st.header("üîÑ –ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤")
    
    if status_analysis is not None:
        # 1. –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤
        st.subheader("–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤ –ø–æ –º–µ—Å—è—Ü–∞–º")
        
        monthly_data = status_analysis['result_df'].reset_index()
        monthly_data['month_str'] = monthly_data['month'].astype(str)
        
        fig1, ax1 = plt.subplots(figsize=(10, 6))
        n_bars = len(monthly_data)
        gray_colors = [f'#{i:02x}{i:02x}{i:02x}' for i in np.linspace(180, 100, n_bars).astype(int)]
        
        ax1 = sns.barplot(x='month_str', y='percentage_reopened', data=monthly_data,
                         palette=gray_colors, 
                         edgecolor='black',
                         linewidth=0.5,
                         ax=ax1)
        
        ax1.set_title('–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤ –ø–æ –º–µ—Å—è—Ü–∞–º\n', fontsize=16)
        ax1.set_xlabel('\n–ú–µ—Å—è—Ü')
        ax1.set_ylabel('–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è\n')
        ax1.grid(False)
        
        for p in ax1.patches:
            ax1.annotate(f'{p.get_height():.1f}%',
                        (p.get_x() + p.get_width() / 2., p.get_height()),
                        ha='center', va='bottom', fontsize=10, fontweight='bold')
        
        plt.xticks(rotation=45)
        plt.tight_layout()
        st.pyplot(fig1)
        
        # 2. –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö
        st.subheader("–¢–æ–ø –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–∫—Ä—ã—Ç—ã–µ —Ç–∏–∫–µ—Ç—ã")
        
        if len(status_analysis['assignee_counts']) > 0:
            top_assignees = status_analysis['assignee_counts'].head(10)
            
            fig2, ax2 = plt.subplots(figsize=(10, 6))
            n_bars = len(top_assignees)
            gray_colors = [f'#{i:02x}{i:02x}{i:02x}' for i in np.linspace(180, 100, n_bars).astype(int)]
            
            ax2 = sns.barplot(x=top_assignees.index, y=top_assignees.values,
                             palette=gray_colors, 
                             edgecolor='black',
                             linewidth=0.5,
                             ax=ax2)
            
            ax2.set_title('–¢–æ–ø-10 –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–∫—Ä—ã—Ç—ã–µ —Ç–∏–∫–µ—Ç—ã\n', fontsize=16)
            ax2.set_xlabel('\n–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π')
            ax2.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∏–∫–µ—Ç–æ–≤\n')
            ax2.grid(False)
            
            for p in ax2.patches:
                ax2.annotate(f'{int(p.get_height())}',
                            (p.get_x() + p.get_width() / 2., p.get_height()),
                            ha='center', va='bottom', fontsize=10, fontweight='bold')
            
            plt.xticks(rotation=45)
            plt.tight_layout()
            st.pyplot(fig2)
        else:
            st.info("–î–∞–Ω–Ω—ã–µ –ø–æ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        # 3. –ì—Ä–∞—Ñ–∏–∫ –∞–±—Å–æ–ª—é—Ç–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        st.subheader("–î–∏–Ω–∞–º–∏–∫–∞ –∑–∞–∫—Ä—ã—Ç—ã—Ö –∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤")
        
        stacked_data = status_analysis['result_df'][['closed_tickets', 'reopened_tickets']].reset_index()
        stacked_data['month_str'] = stacked_data['month'].astype(str)
        
        fig3, ax3 = plt.subplots(figsize=(12, 6))
        width = 0.6
        
        light_gray = '#d3d3d3'
        dark_gray = '#808080'
        
        bars1 = ax3.bar(stacked_data['month_str'], stacked_data['closed_tickets'], width,
                       color=light_gray, 
                       edgecolor='black',
                       linewidth=0.5, 
                       label='–í—Å–µ–≥–æ –∑–∞–∫—Ä—ã—Ç–æ')
        
        bars2 = ax3.bar(stacked_data['month_str'], stacked_data['reopened_tickets'], width,
                       color=dark_gray, 
                       edgecolor='black',
                       linewidth=0.5, 
                       label='–ü–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–∫—Ä—ã—Ç–æ',
                       bottom=stacked_data['closed_tickets'] - stacked_data['reopened_tickets'])
        
        ax3.set_title('–î–∏–Ω–∞–º–∏–∫–∞ –∑–∞–∫—Ä—ã—Ç—ã—Ö –∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤ –ø–æ –º–µ—Å—è—Ü–∞–º\n', fontsize=16)
        ax3.set_xlabel('\n–ú–µ—Å—è—Ü')
        ax3.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∏–∫–µ—Ç–æ–≤\n')
        ax3.legend()
        ax3.grid(False)
        
        for i, (bar, value) in enumerate(zip(bars1, stacked_data['closed_tickets'])):
            ax3.text(bar.get_x() + bar.get_width()/2, value + 1, f'{value}',
                    ha='center', va='bottom', fontsize=9, fontweight='bold')
        
        for i, (bar, value) in enumerate(zip(bars2, stacked_data['reopened_tickets'])):
            if value > 0:
                ax3.text(bar.get_x() + bar.get_width()/2, 
                        stacked_data['closed_tickets'].iloc[i] - value/2, 
                        f'{value}', ha='center', va='center', fontsize=9, 
                        fontweight='bold', color='white')
        
        ax3.legend(bbox_to_anchor=(1.05, 1), loc='upper left', borderaxespad=0.)
        plt.xticks(rotation=45)
        plt.tight_layout()
        st.pyplot(fig3)
        
        # 4. –¢—Ä–µ–Ω–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è
        st.subheader("–¢—Ä–µ–Ω–¥ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –ø–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç–∏—è —Ç–∏–∫–µ—Ç–æ–≤")
        
        fig4, ax4 = plt.subplots(figsize=(10, 6))
        plt.plot(monthly_data['month_str'], monthly_data['percentage_reopened'], 
                 marker='o', 
                 linewidth=2, 
                 markersize=6,
                 color='#666666',
                 markerfacecolor='white',
                 markeredgecolor='black',
                 markeredgewidth=0.5)
        
        plt.title('–¢—Ä–µ–Ω–¥ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –ø–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç–∏—è —Ç–∏–∫–µ—Ç–æ–≤\n', fontsize=16)
        plt.xlabel('\n–ú–µ—Å—è—Ü')
        plt.ylabel('–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è\n')
        plt.grid(True, alpha=0.3)
        
        for i, (month, value) in enumerate(zip(monthly_data['month_str'], monthly_data['percentage_reopened'])):
            plt.annotate(f'{value:.1f}%', 
                        (month, value),
                        xytext=(0, 10),
                        textcoords='offset points',
                        ha='center', 
                        va='bottom',
                        fontsize=9,
                        fontweight='bold')
        
        plt.xticks(rotation=45)
        plt.tight_layout()
        st.pyplot(fig4)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ –≤ —Å–∞–π–¥–±–∞—Ä, –ø–æ–¥ –∫–Ω–æ–ø–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        tickets_with_tags = df['tag'].notna().sum()
        tickets_without_tags = df['tag'].isna().sum()
        
        st.sidebar.info(f"–ù–∞—Ä—É—à–µ–Ω–æ SLA: {violated}")
        st.sidebar.info(f"–°–æ–±–ª—é–¥–µ–Ω–æ SLA: {complied}")
        #st.sidebar.info(f"–í—Å–µ–≥–æ —Ç–∏–∫–µ—Ç–æ–≤ –≤ –∏—Å—Ç–æ—Ä–∏–∏: {len(df_status['ticket_id'].unique())}")
        st.sidebar.info(f"–ü–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤: {len(status_analysis['reopened_tickets'])}")
        st.sidebar.info(f"–¢–∏–∫–µ—Ç–æ–≤ —Å –º–µ—Ç–∫–∞–º–∏: {tickets_with_tags}")
        st.sidebar.info(f"–¢–∏–∫–µ—Ç–æ–≤ –±–µ–∑ –º–µ—Ç–æ–∫: {tickets_without_tags}")
    else:
        st.warning("–î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")

#–≤—Ö–æ–¥ –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É        
if __name__ == "__main__":
    main()

