import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime, timedelta
import streamlit as st
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
from matplotlib.colors import ListedColormap
import warnings
warnings.filterwarnings('ignore')

# —Å—Ç–∏–ª—å
plt.style.use('default')
sns.set(style="whitegrid", palette="gray")

# –∫–µ—à–∏—Ä—É–µ–º –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
@st.cache_data
def load_data():
    df = pd.read_csv('df.csv', parse_dates=['created_date', 'resolved_date'])
    df = df.drop(df.columns[0], axis=1)
    df['last_status'] = df['last_status'].replace('–í —Ä–∞–±–æ—Ç—É', '–í —Ä–∞–±–æ—Ç–µ')
    
    # –≤—Ä–µ–º—è —Ä–µ—à–µ–Ω–∏—è –≤ —á–∞—Å–∞—Ö
    df['resolution_in_hours'] = (df['resolved_date'] - df['created_date']).dt.total_seconds() / 3600
    
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–±–ª—é–¥–µ–Ω–∏—è SLA
    df['sla_violation'] = df['resolution_in_hours'] > df['sla_hours']
    df['sla_compliance'] = ~df['sla_violation']
    
    return df

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Ç–æ—Ä–æ–≥–æ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–∞
@st.cache_data
def load_status_data():
    return pd.read_csv('ticket_status_history_detailed_last_ver.csv', parse_dates=['changed_date'])

# –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
def analyze_status_data(df_status):
    df_sorted = df_status.sort_values(by=['ticket_id', 'changed_date'])
    
    # –°—Ç–∞—Ç—É—Å—ã
    closed_statuses = ['–í—ã–ø–æ–ª–Ω–µ–Ω–æ', '–û—Ç–º–µ–Ω–µ–Ω']
    active_statuses = ['–í —Ä–∞–±–æ—Ç—É', '–í —Ä–∞–±–æ—Ç–µ', '–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ', '–ù–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–∏', '–û–∂–∏–¥–∞–µ—Ç—Å—è –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è']
    
    # –æ—Ç–±–∏—Ä–∞–µ–º –∑–∞–∫—Ä—ã—Ç—ã–µ –∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã
    df_sorted['is_closed'] = df_sorted['status'].isin(closed_statuses)
    df_sorted['is_active'] = df_sorted['status'].isin(active_statuses)
    
    # –Ω–∞—Ö–æ–¥–∏–º –ø–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç—ã–µ —Ç–∏–∫–µ—Ç—ã
    df_sorted['next_is_active'] = df_sorted.groupby('ticket_id')['is_active'].shift(-1)
    reopened_mask = df_sorted['is_closed'] & df_sorted['next_is_active']
    reopened_tickets = df_sorted.loc[reopened_mask, 'ticket_id'].unique().tolist()
    
    # –ê–Ω–∞–ª–∏–∑ –ø–æ –º–µ—Å—è—Ü–∞–º –∏ –∑–∞–∫—Ä—ã—Ç—ã–µ —Ç–∏–∫–µ—Ç—ã
    df_sorted['month'] = df_sorted['changed_date'].dt.to_period('M')
    closed_tickets = df_sorted[df_sorted['status'].isin(closed_statuses)]
    closed_per_month = closed_tickets.groupby('month')['ticket_id'].nunique().rename('closed_tickets')
    
    # –ø–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç—ã–µ —Ç–∏–∫–µ—Ç—ã –ø–æ –º–µ—Å—è—Ü–∞–º
    reopened_df = df_sorted[df_sorted['ticket_id'].isin(reopened_tickets)]
    reopened_per_month = reopened_df.groupby('month')['ticket_id'].nunique().rename('reopened_tickets')
    
    # –°–æ–±–∏—Ä–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É
    result_df = pd.concat([closed_per_month, reopened_per_month], axis=1).fillna(0)
    result_df['percentage_reopened'] = (result_df['reopened_tickets'] / result_df['closed_tickets'] * 100).fillna(0)
    
    # –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞ –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏
    assignee_reopened = df_sorted[
        (df_sorted['ticket_id'].isin(reopened_tickets)) & 
        (df_sorted['status'].isin(closed_statuses))
    ].groupby('ticket_id').last().reset_index()[['ticket_id', 'assignee']]
    
    assignee_counts = assignee_reopened['assignee'].value_counts()
    
    return {
        'result_df': result_df,
        'assignee_counts': assignee_counts,
        'reopened_tickets': reopened_tickets
    }

# –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
def main():
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    df = load_data()
    df_status = load_status_data()
    status_analysis = analyze_status_data(df_status)
    
    # –°–∞–π–¥–±–∞—Ä, –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
    st.sidebar.title("–§–∏–ª—å—Ç—Ä—ã")

    # –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–∞–º
    min_date = df['created_date'].min()
    max_date = df['created_date'].max()

    date_range = st.sidebar.date_input(
        "–î–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è",
        value=(min_date, max_date),
        min_value=min_date,
        max_value=max_date
    )

    if len(date_range) == 2:
        start_date, end_date = date_range
        df = df[(df['created_date'] >= pd.Timestamp(start_date)) & #–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–∞—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –ù–ï —Ä–∞–Ω—å—à–µ –Ω–∞—á–∞–ª–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
                (df['created_date'] <= pd.Timestamp(end_date))]  #—Å—Ç–∞–≤–ª—è–µ—Ç –¥–∞—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –ù–ï –ø–æ–∑–∂–µ –∫–æ–Ω—Ü–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞

    # –§–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º
    priorities = st.sidebar.multiselect(
        "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç",
        options=sorted(df['priority'].unique()),
        default=sorted(df['priority'].unique())
    )

    if priorities:
        df = df[df['priority'].isin(priorities)]

    # –§–∏–ª—å—Ç—Ä –ø–æ –º–µ—Ç–∫–∞–º
    tags = st.sidebar.multiselect(
        "–ú–µ—Ç–∫–∏",
        options=sorted(df['tag'].dropna().unique()),
        default=sorted(df['tag'].dropna().unique())
    )

    if tags:
        df = df[df['tag'].isin(tags)]

    # –§–∏–ª—å—Ç—Ä –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º
    assignees = st.sidebar.multiselect(
        "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏",
        options=sorted(df['last_assignee'].unique()),
        default=sorted(df['last_assignee'].unique())
    )

    if assignees:
        df = df[df['last_assignee'].isin(assignees)]
    
    # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–æ–≤
    st.sidebar.header("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
    if st.sidebar.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å—Ç–∞—Ç—É—Å–æ–≤", key="refresh_status"):
        st.cache_data.clear()
        st.rerun()

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–∞—à–±–æ—Ä–¥–∞
    st.title("–ê–Ω–∞–ª–∏–∑ —Ç–∏–∫–µ—Ç–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∫–∏")

    # KPI –±–∞–Ω—ã
    col1, col2 = st.columns(2) #—Å–æ–∑–¥–∞–ª–∏ –¥–≤–∞ —Å—Ç–æ–ª–±—Ü–∞ –¥–ª—è –ë–∞–Ω–æ–≤, –±—É–¥–µ—Ç —Å—Ä–µ–¥–Ω–µ–µ –∏ –º–µ–¥–∏–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —Ä–µ—à–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–æ–≤

    with col1:
        avg_resolution = df['resolution_in_hours'].mean()
        st.metric("–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Ä–µ—à–µ–Ω–∏—è (—á–∞—Å—ã)", f"{avg_resolution:.1f}")

    with col2:
        median_resolution = df['resolution_in_hours'].median()
        st.metric("–ú–µ–¥–∏–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —Ä–µ—à–µ–Ω–∏—è (—á–∞—Å—ã)", f"{median_resolution:.1f}")

    # üìä –û—Å–Ω–æ–≤–Ω—ã–µ KPI, —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:
    st.header("üìä –û—Å–Ω–æ–≤–Ω—ã–µ KPI, —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:")

    # –ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–±–ª—é–¥–µ–Ω–∏—è SLA, –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–∫
    st.subheader("–ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–±–ª—é–¥–µ–Ω–∏—è SLA, –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–∫")

    violated = (df['sla_compliance'] == False).sum()
    complied = (df['sla_compliance'] == True).sum()

    fig, ax = plt.subplots(figsize=(8, 4))
    counts = [violated, complied]
    labels = ['–ù–∞—Ä—É—à–µ–Ω–æ', '–°–æ–±–ª—é–¥–µ–Ω–æ']
    colors = ['red', 'green']

    ax.bar(labels, counts, color=colors, alpha=0.5, edgecolor='black', linewidth=0.5)
    ax.set_title('–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ–±–ª—é–¥–µ–Ω–∏–µ SLA')
    ax.set_xlabel('–°–æ–±–ª—é–¥–µ–Ω–æ SLA')
    ax.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∏–∫–µ—Ç–æ–≤')

    #–ø–æ–¥–ø–∏—Å–∏ –∑–Ω–∞—á–µ–Ω–∏–π –Ω–∞–¥ —Å—Ç–æ–ª–±—Ü–∞–º–∏
    for i, count in enumerate(counts):
        ax.text(i, count + 5, str(count), ha='center', va='bottom', fontweight='bold')

    ax.grid(False)
    st.pyplot(fig)

    # –î–æ–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è SLA –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º
    sla_priority = df.groupby('priority')['sla_compliance'].mean() * 100

    fig, ax = plt.subplots(figsize=(10, 6))
    colors = sns.light_palette("gray", n_colors=len(sla_priority))
    ax = sla_priority.plot(kind='bar', color=colors, edgecolor='black', linewidth=0.5, ax=ax)
    ax.set_title('–î–æ–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è SLA –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º')
    ax.set_xlabel('–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç')
    ax.set_ylabel('–î–æ–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è SLA (%)')
    ax.set_xticklabels(sla_priority.index, rotation=0)

    for i, v in enumerate(sla_priority):
        ax.text(i, v + 1, f'{v:.1f}%', ha='center', va='bottom', fontsize=9)#–ø–æ–¥–ø–∏—Å–∏ –Ω–∞–¥ —Å—Ç–æ–ª–±—Ü–æ–º

    ax.grid(False)
    st.pyplot(fig)

    # üìÖ –ú–µ—Ç—Ä–∏–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏
    st.header("üìÖ –ú–µ—Ç—Ä–∏–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏")

    # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∏–∫–µ—Ç–æ–≤
    st.subheader("–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∏–∫–µ—Ç–æ–≤")
    st.write(f"–í—Å–µ–≥–æ —Ç–∏–∫–µ—Ç–æ–≤: {df['ticket_id'].count()}")

    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–∫–µ—Ç–æ–≤ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º
    st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–∫–µ—Ç–æ–≤ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º")

    ticket_counts = df['priority'].value_counts().sort_index()

    fig, ax = plt.subplots(figsize=(10, 6))
    ax.bar(ticket_counts.index, ticket_counts.values, alpha=0.7, edgecolor='black')
    ax.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–∫–µ—Ç–æ–≤ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º')
    ax.set_xlabel('–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç')
    ax.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∏–∫–µ—Ç–æ–≤')

    for i, count in enumerate(ticket_counts.values):
        ax.text(i, count + 5, str(count), ha='center', va='bottom', fontweight='bold')#–ø–æ–¥–ø–∏—Å–∏ –Ω–∞–¥ —Å—Ç–æ–ª–±—Ü–æ–º

    ax.grid(False)
    st.pyplot(fig)

    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–∫–µ—Ç–æ–≤ –ø–æ –º–µ—Ç–∫–∞–º
    st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–∫–µ—Ç–æ–≤ –ø–æ –º–µ—Ç–∫–∞–º")

    tag_counts = df['tag'].value_counts()

    fig, ax = plt.subplots(figsize=(12, 6))
    ax.bar(range(len(tag_counts)), tag_counts.values, alpha=0.7, edgecolor='black')
    ax.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–∫–µ—Ç–æ–≤ –ø–æ –º–µ—Ç–∫–∞–º')
    ax.set_xlabel('–ú–µ—Ç–∫–∏')
    ax.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∏–∫–µ—Ç–æ–≤')
    ax.set_xticks(range(len(tag_counts)))
    ax.set_xticklabels(tag_counts.index, rotation=45, ha='right')

    for i, count in enumerate(tag_counts.values):
        ax.text(i, count + 5, str(count), ha='center', va='bottom', fontweight='bold', fontsize=8)

    ax.grid(False)
    st.pyplot(fig)


    # üìà –ê–ù–ê–õ–ò–ó –°–ï–ó–û–ù–ù–û–°–¢–ò –ò –¢–†–ï–ù–î–û–í
    st.header("üìà –ê–Ω–∞–ª–∏–∑ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏ –∏ —Ç—Ä–µ–Ω–¥–æ–≤")
    
    # –°–æ–∑–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    df['created_date_only'] = df['created_date'].dt.date
    df['created_week'] = df['created_date'].dt.isocalendar().week
    df['created_month'] = df['created_date'].dt.month
    df['created_day_of_week'] = df['created_date'].dt.day_name()
    df['created_hour'] = df['created_date'].dt.hour
    
    # 1. –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ–±—ä–µ–º —Ç–∏–∫–µ—Ç–æ–≤ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 –Ω–µ–¥–µ–ª—å)
    st.subheader("–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ–±—ä–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤")
    
    weekly_volume = df.resample('W', on='created_date')['ticket_id'].count().tail(6)
    weekly_labels = weekly_volume.index.strftime('%Y-%m-%d')
    
    fig_weekly, ax_weekly = plt.subplots(figsize=(10, 6))
    ax_weekly = sns.lineplot(x=weekly_labels, y=weekly_volume.values, 
                           marker='o', markersize=8, linewidth=2.5,
                           color='steelblue', ax=ax_weekly)
    
    ax_weekly.set_title('–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ–±—ä–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 –Ω–µ–¥–µ–ª—å)\n', fontsize=16)
    ax_weekly.set_xlabel('\n–ù–µ–¥–µ–ª—è')
    ax_weekly.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∏–∫–µ—Ç–æ–≤\n')
    ax_weekly.grid(True, alpha=0.3)
    
    # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —Ç–æ—á–µ–∫
    for i, (x, y) in enumerate(zip(weekly_labels, weekly_volume.values)):
        ax_weekly.annotate(f'{int(y)}', 
                          (x, y),
                          xytext=(0, 10), 
                          textcoords='offset points',
                          ha='center', va='bottom', 
                          fontsize=10, fontweight='bold')
    
    plt.xticks(rotation=45)
    plt.tight_layout()
    st.pyplot(fig_weekly)
    
    # 2. –ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –æ–±—ä–µ–º —Ç–∏–∫–µ—Ç–æ–≤
    st.subheader("–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –æ–±—ä–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤")
    
    monthly_volume = df.resample('M', on='created_date')['ticket_id'].count()
    monthly_labels = monthly_volume.index.strftime('%Y-%m')
    
    fig_monthly, ax_monthly = plt.subplots(figsize=(10, 6))
    ax_monthly = sns.lineplot(x=monthly_labels, y=monthly_volume.values, 
                            marker='s', markersize=8, linewidth=2.5,
                            color='darkorange', ax=ax_monthly)
    
    ax_monthly.set_title('–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –æ–±—ä–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤\n', fontsize=16)
    ax_monthly.set_xlabel('\n–ú–µ—Å—è—Ü')
    ax_monthly.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∏–∫–µ—Ç–æ–≤\n')
    ax_monthly.grid(True, alpha=0.3)
    
    # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —Ç–æ—á–µ–∫
    for i, (x, y) in enumerate(zip(monthly_labels, monthly_volume.values)):
        ax_monthly.annotate(f'{int(y)}', 
                           (x, y),
                           xytext=(0, 10), 
                           textcoords='offset points',
                           ha='center', va='bottom', 
                           fontsize=10, fontweight='bold')
    
    plt.xticks(rotation=45)
    plt.tight_layout()
    st.pyplot(fig_monthly)
    
    # 3. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–∫–µ—Ç–æ–≤ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
    st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–∫–µ—Ç–æ–≤ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫")
    
    time_intervals = {
        '–ù–æ—á—å (0-6)': df[df['created_hour'].between(0, 6)]['ticket_id'].count(),
        '–£—Ç—Ä–æ (7-10)': df[df['created_hour'].between(7, 10)]['ticket_id'].count(),
        '–î–µ–Ω—å (11-18)': df[df['created_hour'].between(11, 17)]['ticket_id'].count(),
        '–í–µ—á–µ—Ä (19-23)': df[df['created_hour'].between(19, 23)]['ticket_id'].count()
    }
    
    fig_time, ax_time = plt.subplots(figsize=(8, 6))
    colors = ['lightpink', 'lightblue', 'lightgreen', 'lightyellow']
    
    wedges, texts, autotexts = ax_time.pie(
        time_intervals.values(), 
        labels=time_intervals.keys(), 
        autopct='%1.1f%%', 
        colors=colors,
        startangle=90
    )
    
    ax_time.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–∫–µ—Ç–æ–≤ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫\n', fontsize=16)
    
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —à—Ä–∏—Ñ—Ç –¥–ª—è –ø–æ–¥–ø–∏—Å–µ–π
    for text in texts:
        text.set_fontsize(10)
    for autotext in autotexts:
        autotext.set_fontsize(10)
        autotext.set_fontweight('bold')
    
    plt.tight_layout()
    st.pyplot(fig_time)

    # üîÑ –ê–ù–ê–õ–ò–ó –ü–û–í–¢–û–†–ù–´–• –û–ë–†–ê–©–ï–ù–ò–ô
    st.header("üîÑ –ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤")
    
    if status_analysis is not None:
        # 1. –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤
        st.subheader("–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤ –ø–æ –º–µ—Å—è—Ü–∞–º")
        
        monthly_data = status_analysis['result_df'].reset_index()
        monthly_data['month_str'] = monthly_data['month'].astype(str)
        
        fig1, ax1 = plt.subplots(figsize=(10, 6))
        n_bars = len(monthly_data)
        gray_colors = [f'#{i:02x}{i:02x}{i:02x}' for i in np.linspace(180, 100, n_bars).astype(int)]
        
        ax1 = sns.barplot(x='month_str', y='percentage_reopened', data=monthly_data,
                         palette=gray_colors, 
                         edgecolor='black',
                         linewidth=0.5,
                         ax=ax1)
        
        ax1.set_title('–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤ –ø–æ –º–µ—Å—è—Ü–∞–º\n', fontsize=16)
        ax1.set_xlabel('\n–ú–µ—Å—è—Ü')
        ax1.set_ylabel('–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è\n')
        ax1.grid(False)
        
        for p in ax1.patches:
            ax1.annotate(f'{p.get_height():.1f}%',
                        (p.get_x() + p.get_width() / 2., p.get_height()),
                        ha='center', va='bottom', fontsize=10, fontweight='bold')
        
        plt.xticks(rotation=45)
        plt.tight_layout()
        st.pyplot(fig1)
        
        # 2. –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö
        st.subheader("–¢–æ–ø –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–∫—Ä—ã—Ç—ã–µ —Ç–∏–∫–µ—Ç—ã")
        
        if len(status_analysis['assignee_counts']) > 0:
            top_assignees = status_analysis['assignee_counts'].head(10)
            
            fig2, ax2 = plt.subplots(figsize=(10, 6))
            n_bars = len(top_assignees)
            gray_colors = [f'#{i:02x}{i:02x}{i:02x}' for i in np.linspace(180, 100, n_bars).astype(int)]
            
            ax2 = sns.barplot(x=top_assignees.index, y=top_assignees.values,
                             palette=gray_colors, 
                             edgecolor='black',
                             linewidth=0.5,
                             ax=ax2)
            
            ax2.set_title('–¢–æ–ø-10 –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–∫—Ä—ã—Ç—ã–µ —Ç–∏–∫–µ—Ç—ã\n', fontsize=16)
            ax2.set_xlabel('\n–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π')
            ax2.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∏–∫–µ—Ç–æ–≤\n')
            ax2.grid(False)
            
            for p in ax2.patches:
                ax2.annotate(f'{int(p.get_height())}',
                            (p.get_x() + p.get_width() / 2., p.get_height()),
                            ha='center', va='bottom', fontsize=10, fontweight='bold')
            
            plt.xticks(rotation=45)
            plt.tight_layout()
            st.pyplot(fig2)
        else:
            st.info("–î–∞–Ω–Ω—ã–µ –ø–æ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        # 3. –ì—Ä–∞—Ñ–∏–∫ –∞–±—Å–æ–ª—é—Ç–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        st.subheader("–î–∏–Ω–∞–º–∏–∫–∞ –∑–∞–∫—Ä—ã—Ç—ã—Ö –∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤")
        
        stacked_data = status_analysis['result_df'][['closed_tickets', 'reopened_tickets']].reset_index()
        stacked_data['month_str'] = stacked_data['month'].astype(str)
        
        fig3, ax3 = plt.subplots(figsize=(12, 6))
        width = 0.6
        
        light_gray = '#d3d3d3'
        dark_gray = '#808080'
        
        bars1 = ax3.bar(stacked_data['month_str'], stacked_data['closed_tickets'], width,
                       color=light_gray, 
                       edgecolor='black',
                       linewidth=0.5, 
                       label='–í—Å–µ–≥–æ –∑–∞–∫—Ä—ã—Ç–æ')
        
        bars2 = ax3.bar(stacked_data['month_str'], stacked_data['reopened_tickets'], width,
                       color=dark_gray, 
                       edgecolor='black',
                       linewidth=0.5, 
                       label='–ü–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–∫—Ä—ã—Ç–æ',
                       bottom=stacked_data['closed_tickets'] - stacked_data['reopened_tickets'])
        
        ax3.set_title('–î–∏–Ω–∞–º–∏–∫–∞ –∑–∞–∫—Ä—ã—Ç—ã—Ö –∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤ –ø–æ –º–µ—Å—è—Ü–∞–º\n', fontsize=16)
        ax3.set_xlabel('\n–ú–µ—Å—è—Ü')
        ax3.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∏–∫–µ—Ç–æ–≤\n')
        ax3.legend()
        ax3.grid(False)
        
        for i, (bar, value) in enumerate(zip(bars1, stacked_data['closed_tickets'])):
            ax3.text(bar.get_x() + bar.get_width()/2, value + 1, f'{value}',
                    ha='center', va='bottom', fontsize=9, fontweight='bold')
        
        for i, (bar, value) in enumerate(zip(bars2, stacked_data['reopened_tickets'])):
            if value > 0:
                ax3.text(bar.get_x() + bar.get_width()/2, 
                        stacked_data['closed_tickets'].iloc[i] - value/2, 
                        f'{value}', ha='center', va='center', fontsize=9, 
                        fontweight='bold', color='white')
        
        ax3.legend(bbox_to_anchor=(1.05, 1), loc='upper left', borderaxespad=0.)
        plt.xticks(rotation=45)
        plt.tight_layout()
        st.pyplot(fig3)
        
        # 4. –¢—Ä–µ–Ω–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è
        st.subheader("–¢—Ä–µ–Ω–¥ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –ø–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç–∏—è —Ç–∏–∫–µ—Ç–æ–≤")
        
        fig4, ax4 = plt.subplots(figsize=(10, 6))
        plt.plot(monthly_data['month_str'], monthly_data['percentage_reopened'], 
                 marker='o', 
                 linewidth=2, 
                 markersize=6,
                 color='#666666',
                 markerfacecolor='white',
                 markeredgecolor='black',
                 markeredgewidth=0.5)
        
        plt.title('–¢—Ä–µ–Ω–¥ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –ø–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç–∏—è —Ç–∏–∫–µ—Ç–æ–≤\n', fontsize=16)
        plt.xlabel('\n–ú–µ—Å—è—Ü')
        plt.ylabel('–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è\n')
        plt.grid(True, alpha=0.3)
        
        for i, (month, value) in enumerate(zip(monthly_data['month_str'], monthly_data['percentage_reopened'])):
            plt.annotate(f'{value:.1f}%', 
                        (month, value),
                        xytext=(0, 10),
                        textcoords='offset points',
                        ha='center', 
                        va='bottom',
                        fontsize=9,
                        fontweight='bold')
        
        plt.xticks(rotation=45)
        plt.tight_layout()
        st.pyplot(fig4)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ –≤ —Å–∞–π–¥–±–∞—Ä, –ø–æ–¥ –∫–Ω–æ–ø–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        tickets_with_tags = df['tag'].notna().sum()
        tickets_without_tags = df['tag'].isna().sum()
        
        st.sidebar.info(f"–ù–∞—Ä—É—à–µ–Ω–æ SLA: {violated}")
        st.sidebar.info(f"–°–æ–±–ª—é–¥–µ–Ω–æ SLA: {complied}")
        #st.sidebar.info(f"–í—Å–µ–≥–æ —Ç–∏–∫–µ—Ç–æ–≤ –≤ –∏—Å—Ç–æ—Ä–∏–∏: {len(df_status['ticket_id'].unique())}")
        st.sidebar.info(f"–ü–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤: {len(status_analysis['reopened_tickets'])}")
        st.sidebar.info(f"–¢–∏–∫–µ—Ç–æ–≤ —Å –º–µ—Ç–∫–∞–º–∏: {tickets_with_tags}")
        st.sidebar.info(f"–¢–∏–∫–µ—Ç–æ–≤ –±–µ–∑ –º–µ—Ç–æ–∫: {tickets_without_tags}")
    else:
        st.warning("–î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")

    # üìä –ê–ù–ê–õ–ò–ó –í–†–ï–ú–ï–ù–ò –í –°–¢–ê–¢–£–°–ê–•
    st.header("üìä –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Å—Ç–∞—Ç—É—Å–∞—Ö")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã
    closed_statuses = ['–í—ã–ø–æ–ª–Ω–µ–Ω–æ', '–û—Ç–º–µ–Ω–µ–Ω']
    active_statuses = ['–û–∂–∏–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏', '–í —Ä–∞–±–æ—Ç–µ', '–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ', '–ù–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–∏', '–û–∂–∏–¥–∞–µ—Ç—Å—è –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è']
    
    # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ —Ç–∏–∫–µ—Ç—ã –≤ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–∞—Ö
    closed_tickets = df_status[df_status['status'].isin(closed_statuses)]['ticket_id'].unique()
    df_closed = df_status[df_status['ticket_id'].isin(closed_tickets)].copy()
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –º–µ–∂–¥—É —Å–º–µ–Ω–∞–º–∏ —Å—Ç–∞—Ç—É—Å–æ–≤
    df_closed = df_closed.sort_values(['ticket_id', 'changed_date'])
    df_closed['next_changed_date'] = df_closed.groupby('ticket_id')['changed_date'].shift(-1)
    
    # –î–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏ –∫–∞–∂–¥–æ–≥–æ —Ç–∏–∫–µ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–∞—Ç—É
    max_dates = df_closed.groupby('ticket_id')['changed_date'].max()
    for ticket_id in closed_tickets:
        last_idx = df_closed[df_closed['ticket_id'] == ticket_id].index[-1]
        df_closed.loc[last_idx, 'next_changed_date'] = max_dates[ticket_id]
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è
    df_active_times = df_closed[df_closed['status'].isin(active_statuses)].copy()
    df_active_times['time_in_status'] = (df_active_times['next_changed_date'] - df_active_times['changed_date']).dt.total_seconds() / 3600
    
    # –°—É–º–º–∏—Ä—É–µ–º –≤—Ä–µ–º—è –ø–æ –∞–∫—Ç–∏–≤–Ω—ã–º —Å—Ç–∞—Ç—É—Å–∞–º
    time_per_active_status = df_active_times.groupby('status')['time_in_status'].sum()
    total_active_time = time_per_active_status.sum()
    percentage_time_per_status = (time_per_active_status / total_active_time * 100).round(2)
    
    # –ø–∞–π—á–∞—Ä—Ç
    st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ –∞–∫—Ç–∏–≤–Ω—ã–º —Å—Ç–∞—Ç—É—Å–∞–º")
    
    fig, ax = plt.subplots(figsize=(10, 6))
    colors = plt.cm.Pastel1(range(len(percentage_time_per_status)))
    
    wedges, texts, autotexts = ax.pie(percentage_time_per_status.values, 
                                      labels=percentage_time_per_status.index,
                                      autopct='%1.1f%%', 
                                      colors=colors,
                                      startangle=90)
    
    ax.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ –∞–∫—Ç–∏–≤–Ω—ã–º —Å—Ç–∞—Ç—É—Å–∞–º –∑–∞–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤', 
                 fontsize=16, fontweight='bold', pad=20)
    
    plt.tight_layout()
    st.pyplot(fig)

    # üë§üìà KPI –ò–°–ü–û–õ–ù–ò–¢–ï–õ–ï–ô
    st.header("üë§üìà KPI –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π")
    
    # –ü—Ä–æ—Ü–µ–Ω—Ç —Ç–∏–∫–µ—Ç–æ–≤, —Ä–µ—à–µ–Ω–Ω—ã—Ö —Ç–µ–º –∂–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º
    st.subheader("–ü—Ä–æ—Ü–µ–Ω—Ç —Ç–∏–∫–µ—Ç–æ–≤, —Ä–µ—à–µ–Ω–Ω—ã—Ö —Ç–µ–º –∂–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º")
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≥–¥–µ first_assignee —Ç–æ—Ç –∂–µ, —á—Ç–æ –∏ last_assignee
    same_assignee_tickets = df[df['first_assignee'] == df['last_assignee']]
    ticket_count_per_assignee = same_assignee_tickets['first_assignee'].value_counts()
    
    # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∏–∫–µ—Ç–æ–≤ –ø–æ –∫–∞–∂–¥–æ–º—É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é
    total_tickets_per_assignee = df['first_assignee'].value_counts()
    
    # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ
    percentage_solved_same = (ticket_count_per_assignee / total_tickets_per_assignee) * 100
    percentage_solved_same = percentage_solved_same.sort_values(ascending=False)
    
    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
    fig, ax = plt.subplots(figsize=(12, 6))
    
    # –≥—Ä–∞–¥–∏–µ–Ω—Ç —Å–µ—Ä–æ–≥–æ
    n_bars = len(percentage_solved_same)
    gray_colors = [f'#{i:02x}{i:02x}{i:02x}' for i in np.linspace(180, 100, n_bars).astype(int)]
    
    bars = ax.bar(percentage_solved_same.index, percentage_solved_same.values, 
                 color=gray_colors, edgecolor='black', linewidth=1, alpha=0.8)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞
    ax.set_title('–ü—Ä–æ—Ü–µ–Ω—Ç —Ç–∏–∫–µ—Ç–æ–≤, —Ä–µ—à–µ–Ω–Ω—ã—Ö —Ç–µ–º –∂–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º\n', fontsize=16, pad=20)
    ax.set_xlabel('–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å', fontsize=12)
    ax.set_ylabel('% —Ä–µ—à–µ–Ω–Ω—ã—Ö —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ\n', fontsize=12)
    ax.set_xticklabels(percentage_solved_same.index, rotation=45, ha='right')
    ax.grid(axis='y', alpha=0.3)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
    for bar, value in zip(bars, percentage_solved_same.values):
        ax.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 0.5,
                f'{value:.1f}%', ha='center', va='bottom', fontsize=10, fontweight='bold')
    
    ax.grid(False)
    plt.tight_layout()
    st.pyplot(fig)
    
    # –ú–µ–¥–∏–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —Ä–µ—à–µ–Ω–∏—è –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º
    st.subheader("–ú–µ–¥–∏–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —Ä–µ—à–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–æ–≤ –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º")
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ–¥–∏–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —Ä–µ—à–µ–Ω–∏—è –¥–ª—è —Ç–∏–∫–µ—Ç–æ–≤, –≥–¥–µ first_assignee = last_assignee
    same_assignee_tickets = df[df['first_assignee'] == df['last_assignee']]
    median_resolution_time = same_assignee_tickets.groupby('first_assignee')['resolution_in_hours'].median()
    median_resolution_time = median_resolution_time.sort_values(ascending=True)  # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    
    # –æ—Ç–¥–µ–ª—å–Ω—ã–π DataFrame –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    median_resolution_df = pd.DataFrame({
        '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å': median_resolution_time.index,
        'median_time': median_resolution_time.values
    }).sort_values('median_time', ascending=True)
    
    # –±–∞—Ä–ø–ª–æ—Ç
    fig, ax = plt.subplots(figsize=(10, 8))
    
    # –≥—Ä–∞–¥–∏–µ–Ω—Ç —Å–µ—Ä–æ–≥–æ
    n_bars = len(median_resolution_df)
    gray_colors = [f'#{i:02x}{i:02x}{i:02x}' for i in np.linspace(180, 100, n_bars).astype(int)]
    
    bars = ax.barh(median_resolution_df['–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å'], median_resolution_df['median_time'],
                  color=gray_colors, edgecolor='black', linewidth=1, alpha=0.8)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    ax.set_title('–ú–µ–¥–∏–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —Ä–µ—à–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–æ–≤ –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º\n(first_assignee = last_assignee)', 
                fontsize=16, pad=20, fontweight='bold')
    ax.set_xlabel('–ú–µ–¥–∏–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —Ä–µ—à–µ–Ω–∏—è (—á–∞—Å—ã)', fontsize=12)
    ax.set_ylabel('–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å', fontsize=12)
    ax.grid(axis='x', alpha=0.3)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
    for bar, value in zip(bars, median_resolution_df['median_time']):
        ax.text(bar.get_width() + 0.5, bar.get_y() + bar.get_height()/2,
               f'{value:.1f}—á', ha='left', va='center', fontsize=10, fontweight='bold')
    
    ax.grid(False)
    plt.tight_layout()
    st.pyplot(fig)
    
    # –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –º–µ—Ç–∫–∞–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
    st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Ç–æ–∫ –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º")
    
    same_assignee_tickets = df[df['first_assignee'] == df['last_assignee']]

    # –¢–æ–ø –º–µ—Ç–æ–∫ –ø–æ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º
    top_n_tags = same_assignee_tickets['tag'].value_counts().head(15).index.tolist()

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º –∏ –º–µ—Ç–∫–∞–º
    grouped_data = same_assignee_tickets.groupby(['first_assignee', 'tag']).size().unstack(fill_value=0)

    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–ø –º–µ—Ç–∫–∏, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–ø—Ä–µ–¥–µ–ª–∏–º –≤ "Other"
    available_top_tags = [tag for tag in top_n_tags if tag in grouped_data.columns]
    grouped_data_top = grouped_data[available_top_tags].copy()

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É Other –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –º–µ—Ç–æ–∫
    other_tags = [col for col in grouped_data.columns if col not in available_top_tags]
    if other_tags:
        grouped_data_top['Other'] = grouped_data[other_tags].sum(axis=1)
    else:
        grouped_data_top['Other'] = 0

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –ø–æ –æ–±—â–µ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ç–∏–∫–µ—Ç–æ–≤
    grouped_data_top = grouped_data_top.loc[grouped_data_top.sum(axis=1).sort_values(ascending=False).index]

    # –≥—Ä–∞—Ñ–∏–∫
    fig, ax = plt.subplots(figsize=(14, 10))

    # –¶–≤–µ—Ç–æ–≤–∞—è –∫–∞—Ä—Ç–∞
    colors = plt.cm.Set3(np.linspace(0, 1, len(grouped_data_top.columns)))
    cmap = ListedColormap(colors)

    # –±–∞—Ä–ø–ª–æ—Ç —Å –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ–º
    bars = grouped_data_top.plot(kind='barh', stacked=True, ax=ax, colormap=cmap, alpha=0.8)

    ax.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Ç–∫–∏ –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º\n(first_assignee = last_assignee)', 
                 fontsize=16, pad=20, fontweight='bold')
    ax.set_xlabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∏–∫–µ—Ç–æ–≤', fontsize=12)
    ax.set_ylabel('–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å', fontsize=12)
    ax.tick_params(axis='y', labelsize=10)
    ax.grid(axis='x', alpha=0.3)

    # –õ–µ–≥–µ–Ω–¥—É –≤—ã–Ω–æ—Å–∏–º —Å–ø—Ä–∞–≤–∞
    ax.legend(bbox_to_anchor=(1.05, 1), loc='upper left', borderaxespad=0., 
              title='–ú–µ—Ç–∫–∏ (tags)', title_fontsize=11, fontsize=10)

    plt.tight_layout()
    plt.subplots_adjust(right=0.8)  # –ú–µ—Å—Ç–æ –¥–ª—è –ª–µ–≥–µ–Ω–¥—ã
    st.pyplot(fig)

#–≤—Ö–æ–¥ –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É        
if __name__ == "__main__":
    main()
